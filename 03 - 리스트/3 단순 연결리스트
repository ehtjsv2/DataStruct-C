 <배운점>
 
 -연결리스트 메모리 해제 시.
 헤드만 free하면 안되고 노드 하나하나 다 free해주어야한다.
 
 -strcpy() 주의점
 strcpy는 문장끝에 '\0'을 넣어주지 않기때문에 조심해야한다.
 
 -deletNode()를 만들 때
 p->link부터 확인을 시작했으니 p는 확인을 못한다.
 따라서 첫번째 원소가 삭제할 원소인지 확인 못하고 지나치게된다.
 이 점 주의하고 첫번째 원소일 경우도 생각해야한다.
 ------------------------------------------------------------------------------------------------------------------------------------
 <코드>
 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


// 공백 연결리스트를 생성
// 연결리스트 전체 메모리 해제
// 연결리스트 순서대로 출력
// 노드를 중간에 삽입
// 마지막 노드로 삽입
// 노드 입력 후 노드를 삭제
// 노드를 탐색 후 노드 리턴

typedef struct ListNode { //노드 구조체
	char data[4];
	struct Node* link;
}listNode;

typedef struct linkedList_h { // 리스트의 헤드
	listNode* head;
}linkedList_h;

linkedList_h* Create_List() { // 공백 연결리스트 생성
	linkedList_h* newlist = (linkedList_h*)malloc(sizeof(linkedList_h));
	newlist->head = NULL;
	return newlist;
}

void freeList(linkedList_h* L) { //연결리스트 전체메모리 해제
	listNode* p;
	while (L->head != NULL) {
		p = L->head;
		L->head = L->head->link;
		free(p);
		p = NULL;
	}
	printf("리스트 삭제 완료!\n");
	return;
}

void printList(linkedList_h* L) { // 연결리스트 순서대로 출력
	listNode* horse = L->head;
	while (horse != NULL) {
		printf("%s ->", horse->data);
		horse = horse->link;
	}
	puts("");
	return;
}

listNode* searchNode(linkedList_h* L, char* data) { // data를 갖는 노드찾기
	listNode* p = L->head;
	while (p != NULL) {
		if (strcmp(p->data, data) == 0) { // 문자열 비교연산 0이면 일치.
			return p;
		}
		p = p->link;
	}
	printf("data를 찾지못했습니다.\n");
}

void insertFirstNode(linkedList_h* L, char* data) { // 첫번째 노드로 삽입
	listNode* node = (listNode*)malloc(sizeof(listNode));
	strcpy(node->data, data); // node->data 에 문장끝에는 0이 아니라 쓰레기값이 들어있어서 출력할 때 문제를 일으킬수 있기때문에 끝에0을 넣어줌
	node->data[strlen(data)] = '\0';
	node->link = L->head;
	L->head = node;
	return;
}


void insertMiddleNode(linkedList_h* L, listNode* pre, char* data) { // pre뒤에 노드 삽입.
	listNode* node = (listNode*)malloc(sizeof(listNode));
	strcpy(node->data, data); // node->data 에 문장끝에는 0이 아니라 쓰레기값이 들어있어서 출력할 때 문제를 일으킬수 있기때문에 끝에0을 넣어줌
	node->data[strlen(data)] = '\0';
	listNode* p = L->head;
	while (p != NULL) {
		if (p == pre) {
			node->link = p->link;
			p->link = node;
			return;
		}
		p = p->link;
	}
	printf("pre노드를 찾지못했습니다.\n");
	return;
}

void insertLastNode(linkedList_h* L, char* data) { // 마지막 노드를 삽입
	listNode* node = (listNode*)malloc(sizeof(listNode));
	strcpy(node->data, data); // node->data 에 문장끝에는 0이 아니라 쓰레기값이 들어있어서 출력할 때 문제를 일으킬수 있기때문에 끝에0을 넣어줌
	node->data[strlen(data)] = '\0';
	if (L->head == NULL) { // 리스트가 공백
		L->head = node;
		node->link = NULL;
		return;
	}
	listNode* p = L->head;
	while (p!= NULL) {
		if (p->link == NULL) {
			node->link = p->link;
			p->link = node;
			return;
		}
		p = p->link;
	}
	return;
}

void deleteNode(linkedList_h* L, listNode* search) {
	listNode* p = L->head;
	if (L->head == search) {	// 첫원소가 삭제할 데이터 일 경우
		L->head = search->link;
		free(search);
		return;
	}
	while (p->link != NULL) {	
		if (p->link == search) {
			p->link = search->link;
			free(search);
			return;
		}
		p = p->link;
	}
	printf("삭제할 데이터를 찾을 수 없습니다.\n");
	return;
}

void main() {
	linkedList_h* L = Create_List();	// 공백리스트 생성
	insertFirstNode(L, "월");	// 첫번째 노드로 삽입
	printList(L);	//리스트 출력
	listNode* search = searchNode(L,"월");	// "월" 문자를 포함한 노드 찾기
	insertMiddleNode(L, search, "화");	// "월"뒤에 "화" 삽입
	printList(L);	//리스트 출력
	insertLastNode(L, "수"); // 마지막노드 삽입
	printList(L);	//리스트 출력
	deleteNode(L, searchNode(L,"화"));	// "화" 노드 삭제
	printList(L);	//리스트 출력
	freeList(L);	//리스트 삭제
	printList(L);	//리스트 출력
}
------------------------------------------------------------------------------------------------------------------------------------
<출력>
월 ->
월 ->화 ->
월 ->화 ->수 ->
월 ->수 ->
리스트 삭제 완료!
