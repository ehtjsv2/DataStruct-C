<배운점>

-front와 rear
front는 젤 앞원소를 가리킴
rear는 젤 뒤원소를 가리킴

-enqueue와 dequeue
enqueue 할때는 ++rear연산 삽입한다.(rear가 끝원소를 가리켜야한다.)
dequeue 할때는 front++연산 삽입한다.(원소 삭제후에는 다음원소를 가리켜되기때문에)

-peek()
peek는 front의 원소를 검색해준다.

-배열 큐의 장단점
배열큐는 속도는 빠르지만 크기가 제한적이라는 단점이있다.

-큐의 활용사례
ex. 대기열, 은행업무, 콜센터 대기시간, 캐시(cache)

--------------------------------------------------------------------------------------------------------------
<코드>
#include <stdio.h>
#include <stdlib.h>

#define Q_SIZE 4

// 공백 큐를 생성
// 큐가 공백인지 검사
// 큐의 rear에 원소를 삽입
// 큐의 front에 있는 원소를 삭제
// 큐의 front에 있는 원소를 반환
// 큐의 원소를 출력

typedef struct QueueType{
	char queue[Q_SIZE];
	int front, rear;
}QueueType;

QueueType* createQueue() {
	QueueType* Q = (QueueType*)malloc(sizeof(QueueType));
	Q->front = 0;	// front는 젤 앞의 원소를 가리킴
	Q->rear = -1;	// rear는 젤 뒤의 원소를 가리킴
}

int isEmpty(QueueType* Q) {
	if (Q->front > Q->rear) {	// front 가 rear보다 크면 공백
		return 1;
	}
	else return 0;
}

int isFull(QueueType* Q) {
	if (Q->rear == Q_SIZE - 1) { // rear가 마지막인덱스에 도달하면 full
		return 1;
	}
	else return 0;
}

void enQueue(QueueType *Q, char item) { // rear에 원소를 삽입
	if (isFull(Q)) {
		printf("큐가 가득찼습니다!\n");
		return;
	}
	Q->queue[++Q->rear] = item;	// 현재 rear가 가리키기는 곳 다음에 삽입
	return;
}

char deQueue(QueueType* Q) {	//큐의 가장 앞원소를 반환후 삭제
	if (isEmpty(Q)) {
		printf("큐가 비었습니다.\n");
		return -1;
	}
	return Q->queue[Q->front++];	//반환 후 다음원소 가리키기
}

char peek(QueueType* Q) {	// 큐의 가장 앞원소를 검색
	if (isEmpty(Q)) {
		printf("큐가 비었습니다.\n");
		return -1;
	}
	return Q->queue[Q->front];
}

void printQ(QueueType* Q) {
	printf("Q 출력 : ");
	for (int i = Q->front; i <= Q->rear; i++) {
		printf("%c -> ", Q->queue[i]);
	}
	printf("\n");
	return;
}

void main() {
	QueueType* Q1 = createQueue();
	char data;
	printf("\n순차 큐 연산 \n");
	enQueue(Q1, 'A');	// A삽입
	enQueue(Q1, 'B');	// B삽입
	enQueue(Q1, 'C');	// C삽입
	printQ(Q1);	// 큐 출력
	data = peek(Q1);
	printf(" peek 원소 : %c \n\n", data);
	printf("DeQueue();\n");
	deQueue(Q1);
	printQ(Q1);
	printf("\nDeQueue();\n");
	deQueue(Q1);
	printQ(Q1);
	printf("\nDeQueue();\n");
	deQueue(Q1);
	printQ(Q1);
}
--------------------------------------------------------------------------------------------------------------
<출력>
순차 큐 연산
Q 출력 : A -> B -> C ->
 peek 원소 : A

DeQueue();
Q 출력 : B -> C ->

DeQueue();
Q 출력 : C ->

DeQueue();
Q 출력 :
