<배운점>

-반복문 간소화 하기
while (n != 1) {
		if (item > h->heap[n / 2]) {
			h->heap[n] = h->heap[n / 2];
			n = n / 2;
		}
		else break;
	}
여기서 else는 break말고 다른게 없기때문에 이렇게 고칠수있다.
while ((n != 1) && (item > h->heap[n / 2])) {
		h->heap[n] = h->heap[n / 2];
		n = n / 2;
	}
  
-최대힙과 최소힙
//히프는 완전 이진트리에서 키값이 가장 큰노드를 찾거나 가장 작은노드를 찾기위해 만들어진 자료구조이다.
//최대힙에서는 루트에 최대값을 최소힙에서는 루트에 최솟값을 가지고있다.

-최대히프
//부모노드의 키값 >= 자식노드의 키값

-최소히프
//부모노드의 키값 <= 자식노드의 키값

-최대히프에서 삽입연산
//제일 마지막 노드에 삽입한다.
//부모노드와 비교해서 자신이 더크다면 교환하는 방식.

-최대히프에서 삭제연산
//루트노드를 반환 후 삭제한다
//제일 마지막 노드를 루트노드로 가져온다.
//그 후 두개의 자식 중 더 큰 자식과 비교해서 자식이 더 크다면 교환하는 방식.

-삭제연산 주의사항
//92번줄 코드에
//(child < h->heap_size) && (h->heap[child] < h->heap[child + 1])
//이 부분에서 child< h->heap_size를 안해주면 
//h->heap[child+1]에서 엉뚱한 데이터를 가리키기 때문에 꼭 첫 조건으로 넣어줘야한다


---------------------------------------------------------------------------------------------------------
<코드>
#include <stdio.h>
#include <stdlib.h>
#define MAX_ELEMENT 100

//최대힙 구현


typedef struct {
	int heap[MAX_ELEMENT];
	int heap_size;
}heapType;

heapType* createHeap() {
	heapType* h = (heapType*)malloc(sizeof(heapType));
	h->heap_size = 0;
	return h;
}

void insertHeap(heapType* h, int item) {
	int n = 0;
	if (h->heap_size >= MAX_ELEMENT-1) {
		printf("힙이 가득 찼습니다.\n");
		return;
	}
	h->heap_size++;
	n = h->heap_size;
	h->heap[n] = item;
	while (n != 1) {
		if (item > h->heap[n / 2]) {
			h->heap[n] = h->heap[n / 2];
			n = n / 2;
		}
		else break;
	}
	h->heap[n] = item;
	return;
}

int deleteHeap(heapType* h) {
	int parent, child;
	int item, temp;
	item = h->heap[1];	// 반환할 키
	temp = h->heap[h->heap_size];	// 마지막 노드의 키 저장
	h->heap[h->heap_size--] = 0;	// 마지막 노드 비워주기
	parent = 1;
	child = 2;
	while (child <= h->heap_size) {
		if ((child < h->heap_size) && (h->heap[child] < h->heap[child + 1]))child++; // child가 heap_size랑 같아버리면 h->heap[child+1]은 알수없는 값을 가르키기 때문에 더 작아야된다.
		if (temp >= h->heap[child])break;
		else {
			h->heap[parent] = h->heap[child];
			parent = child;
			child = child * 2;
		}
	}
	h->heap[parent] = temp;
	return item;
}

void printHeap(heapType* h) {
	if (h->heap_size == 0) {
		printf("힙이 비었습니다\n");
		return;
	}
	for (int i = 1; i <= h->heap_size; i++) {
		printf(" %d ", h->heap[i]);
	}
	printf("\n");
	return;
}



main() {
	heapType* Heap = createHeap();
	insertHeap(Heap, 20);
	insertHeap(Heap, 13);
	insertHeap(Heap, 19);
	insertHeap(Heap, 8);
	insertHeap(Heap, 15);
	insertHeap(Heap, 10);
	insertHeap(Heap, 23);
	printHeap(Heap);

	printf("\n%d 삭제\n",deleteHeap(Heap));	// 1
	printHeap(Heap);
	printf("\n%d 삭제\n", deleteHeap(Heap));	// 2
	printHeap(Heap);
	printf("\n%d 삭제\n", deleteHeap(Heap));	// 3
	printHeap(Heap);
	printf("\n%d 삭제\n", deleteHeap(Heap));	// 4
	printHeap(Heap);
	printf("\n%d 삭제\n", deleteHeap(Heap));	// 5
	printHeap(Heap);
	printf("\n%d 삭제\n", deleteHeap(Heap));	// 6
	printHeap(Heap);
	printf("\n%d 삭제\n", deleteHeap(Heap));	// 7
	printHeap(Heap);
}
---------------------------------------------------------------------------------------------------------
<출력>
 23  15  20  8  13  10  19

23 삭제
 20  15  19  8  13  10

20 삭제
 19  15  10  8  13

19 삭제
 15  13  10  8

15 삭제
 13  8  10

13 삭제
 10  8

10 삭제
 8

8 삭제
힙이 비었습니다
