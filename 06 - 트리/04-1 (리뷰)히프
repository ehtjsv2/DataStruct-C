<배운점>

-힙 삽입
마지막 노드에 넣고 부모노드(n/2)와 계속 비교해가며
부모노드가 작으면 n에 n/2의 데이터 값을 넣어주고 n=n/2해주고
부모노드가 크면은 break해서
n에 삽입한 노드를 넣어준다.

-힙 삭제
인덱스 1의 값을 리턴변수tmp에.
마지막 인덱스의 값을 last변수에 넣고 --
부모변수 자식변수 만들고
부모=1 자식=2
while(자식<=마지막 인덱스) 
if(자식<마지막인덱스) // 자식이 두개라는 뜻. 
자식인덱스 == 마지막인덱스 라는것은 자식이 한개밖에 없다는 뜻으로됨
그 이유는 뒤에 자식=자식*2를 하는데 *2를 하면 항상 부모노드의 왼쪽 자식을 가리키게 되기때문이다.
힙은 완전 이진트리이기때문에 왼쪽 자식이 마지막인덱스 값과 같다면 자식이 왼쪽으로 끝난다는 뜻으로 연결된다.
if(자식<마지막인덱스 && 자식 <자식+1(오른쪽자식) )자식++ // 더큰 자식을 구하는 조건문이기에 오른쪽 자식이 더크다면 자식++

if(last<자식){
  부모데이터->자식
  부모인덱스=자식;
  자식인덱스=자식*2;
}
else break; // last데이터의 자리를 찾았다는 뜻.
부모자리에 last넣어주면 끝.
----------------------------------------------------------------------------------------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>

#define SIZE 11

typedef struct Heap {
	int data[SIZE];
	int index;
}Heap;

Heap* createHeap() {
	Heap* H = (Heap*)malloc(sizeof(Heap));
	H->index = 0;
	for (int i = 0; i < SIZE; i++) {
		H->data[i] = 0;
	}
	return H;
}

void insertHeap(Heap* H, int data) {
	if (H->index >= SIZE - 1) {
		printf("힙이 가득 찼습니다.\n");
		return;
	}
	H->data[++H->index] = data;
	int n = H->index;
	while (n != 1) {
		if (H->data[n / 2] < data) {
			H->data[n] = H->data[n / 2];
			n = n / 2;
		}
		else break;
	}
	H->data[n] = data;
	return;
}

int deleteHeap(Heap* H) {
	if (H->index <= 0) {
		printf("힙이 비었습니다.\n");
		return -1;
	}
	int tmp = H->data[1];
	int last = H->data[H->index--];
	int parent = 1;
	int child = 2;
	while (child <= H->index) {
		if (child < H->index && H->data[child] < H->data[child + 1])child++; // child가 H->index랑 같다면은 이 조건문에 못들어온다. 자식이 하나이기때문에 chlid는 증가할 이유가없다.
		
		if (last < H->data[child]) {
			H->data[parent] = H->data[child];
			parent = child;
			child *= 2;
		}
		else break;
	}
	H->data[parent] = last;
	return tmp;
}

void inorder(Heap* H,int n) {
	if (n <= H->index) {
		inorder(H, n * 2);
		printf("%d ", H->data[n]);
		inorder(H, n * 2 + 1);
	}
}

main() {
	Heap* H = createHeap();
	insertHeap(H, 1);
	insertHeap(H, 2);
	insertHeap(H, 3);
	insertHeap(H, 4);
	inorder(H, 1);
	puts("");
	printf("최대힙 = %d\n", deleteHeap(H));
	printf("최대힙 = %d\n", deleteHeap(H));
	printf("최대힙 = %d\n", deleteHeap(H));
	printf("최대힙 = %d\n", deleteHeap(H));
	printf("최대힙 = %d\n", deleteHeap(H));
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------
<출력>
1 3 4 2
최대힙 = 4
최대힙 = 3
최대힙 = 2
최대힙 = 1
힙이 비었습니다.
최대힙 = -1
