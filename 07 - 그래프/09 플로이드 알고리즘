<배운점>

-플로이드 알고리즘(Floyd algorithm)이란?
이전에 배운 다익스트라 알고리즘은 하나의 정점에서 
다른정점들까지의 최단경로를 구하는 것이였다면
플로이드 알고리즘은
모든 정점에서 모든 정점까지의 최단경로를 구하는 것이다.

-알고리즘 구현방식
이 알고리즘의 핵심은 거쳐가는 정점을 기준으로 최단경로를 구하는 것이다.
만약 3에서 4로 가는 경로에서 1을 거쳐간다면 최단경로가 바뀌는지를 보면된다.
if([3][4]>[3][1]+[1][4])
[3][4]=[3][1]+[1][4]
가 되는 것이다.

-시간복잡도
보다싶이 정점의 개수만큼 반복하는 반복문이 3개있으므로
O(V^3)
---------------------------------------------------------------------------------------------------------
<코드>
#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTEX 5
#define INF 10000 // 무한대 약자

int weight[MAX_VERTEX][MAX_VERTEX] = { // 그래프의 가중치 인접행렬
	{0,10,5,INF,INF},
	{INF,0,2,1,INF},
	{INF,3,0,9,2},
	{INF,INF,INF,0,4},
	{7,INF,INF,6,0}
};
int distance[MAX_VERTEX][MAX_VERTEX];	//  v부터 u까지의 최단거리

void printDistance() {
	for (int i = 0; i < MAX_VERTEX; i++) {
		for (int j = 0; j < MAX_VERTEX; j++)
			printf("%6d", distance[i][j]);
		printf("\n");
	}
	puts("");
}

void Floyed() {
	for (int k = 0; k < MAX_VERTEX; k++) {
		for (int j = 0; j < MAX_VERTEX; j++) {
			for (int i = 0; i < MAX_VERTEX; i++) {
				if (distance[j][i] > distance[j][k] + distance[k][i])
					distance[j][i] = distance[j][k] + distance[k][i];
			}
		}
	}
}


main() {
	for (int j = 0; j < MAX_VERTEX; j++)
	for (int i = 0; i < MAX_VERTEX; i++) {
		distance[j][i] = weight[j][i];
	}
	
	printDistance();
	Floyed();
	printDistance();
}

---------------------------------------------------------------------------------------------------------
<출력>

     0    10     5 10000 10000
 10000     0     2     1 10000
 10000     3     0     9     2
 10000 10000 10000     0     4
     7 10000 10000     6     0

     0     8     5     9     7
    11     0     2     1     4
     9     3     0     4     2
    11    19    16     0     4
     7    15    12     6     0
