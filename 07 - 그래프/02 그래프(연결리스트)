<배운점>

-인접리스트로 표현한 그래프 구현
구현한 방법을 보면 정점을 추가하게되면 실제로 그 정점의 노드가 생기지는 않는다.
adjList_H[v]가 그 정점을 대신한다.

-아쉬운점
1. 정점추가하는 함수에 v를 입력받지만 실제로 v와 상관없이 0부터 +1씩 추가된다.
ㄴ지금은 시간이 없지만 나중에 v에 맞는 정점을 추가하도록 고쳐보겠다.

------------------------------------------------------------------------------------------------------------
<코드>

//오타 : adjLish_H => adjLish_H

#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTEX 30

typedef struct {	 // 정점을 가진 노드 구조체
	int vertex;	// 정점
	struct graphNode* link;	// 링크
}graphNode;

typedef struct {	// 그래프 구조체
	int n;	// 정점의 개수
	graphNode* adjLish_H[MAX_VERTEX];	// 정점의 인접노드 포인터
}graphType;

int isEmpty(graphType* g) {	// 그래프 공백체크
	if (g->n == 0)return 1;
	else return 0;
}

graphType* createGraph() {	// 공백 그래프 생성
	graphType* g = (graphType*)malloc(sizeof(graphType));
	g -> n = 0;
	for (int i = 0; i < MAX_VERTEX; i++) {
		g->adjLish_H[i] = NULL;
	}
	return g;
}

graphNode* createNode(int v) {	// 공백 노드 생성
	graphNode* newnode = (graphNode*)malloc(sizeof(graphNode));
	newnode->link = NULL;
	newnode->vertex = v;
}

void insertVertex(graphType* g, int v) {	// 정점 추가
	if (g->n >= MAX_VERTEX - 1) {
		printf("MAX_VERTEX에 도달했습니다.\n");
		return;
	}
	g->n++;	// 실제로 v를 추가하는 건 없고 정점은 자동으로 0부터 +1씩 추가된다
}

void insertEdge(graphType* g, int u, int v) {	// 정점 u와 v사이 간선 추가
	if (u >= g->n || v >= g->n) {
		printf("존재하지 않는 정점입니다.\n");
		return;
	}
	graphNode* newnode1 = createNode(v); // 정점 v를 가진 노드 생성
	newnode1->link = g->adjLish_H[u];	// v를 가진 노드의 다음 링크는 u의 젤앞 인접노드주소를 가지고
	g->adjLish_H[u] = newnode1;	// u의 젤앞 인접노드를 v로 설정해준다
	return;
}

void printGraph(graphType* g) {	// 인접리스트 그래프 프린트
	if (isEmpty(g)) {
		printf("그래프가 비었습니다.\n");
	}
	graphNode* horse = NULL;
	for (int i = 0; i < g->n; i++) {
		printf("정점 %c의 인접리스트 ", i + 65);
		horse = g->adjLish_H[i];
		while (horse != NULL) {
			printf("-> %c ", (horse->vertex)+65);
			horse = horse->link;
		}
		puts("");
	}
}

void main() {
	graphType* G;
	G = createGraph();

	for (int i = 0; i < 4; i++) {
		insertVertex(G, i);
	}
	insertEdge(G, 0, 3);
	insertEdge(G, 0, 1);
	insertEdge(G, 1, 3);
	insertEdge(G, 1, 2);
	insertEdge(G, 1, 0);
	insertEdge(G, 2, 3);
	insertEdge(G, 2, 1);
	insertEdge(G, 3, 2);
	insertEdge(G, 3, 1);
	insertEdge(G, 3, 0);

	printGraph(G);
}

------------------------------------------------------------------------------------------------------------
<출력>
정점 A의 인접리스트 -> B -> D
정점 B의 인접리스트 -> A -> C -> D
정점 C의 인접리스트 -> B -> D
정점 D의 인접리스트 -> A -> B -> C
