<배운점>

-구조체를 배열로 선언
//구조체를 배열로 선언해본게 오랜만이라 오류가뜬다.
//enQueue()에서 Q->data[++Q->rear] = data; 를 하려고하면
//프로그램이 끝나버린다.enQueue()함수엔 문제없어보이니
//구조체배열을 다루는 법을 다시 다룰 필요가 있겠다.
//코드는 미완성이고 업데이트하겠다.
//일단은 큐를 연결리스트로 고쳐보았다.
------------------------------------------------------------------------------------------------------------------------
<코드>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX 8

typedef struct Queue {
	int data[MAX];
	int front, rear;
}Queue;

Queue* createQueue() {
	Queue* Q = (Queue*)malloc(sizeof(Queue));
	for (int i = 0; i < MAX; i++)Q->data[MAX] = 0;
	Q->front = 0; 
	Q->rear = -1;
	return Q;
}

void enQueue(Queue* Q, int data) {
	static int cnt = 1;
	printf("\n%d삽입", cnt++);
	if (Q->rear == MAX - 1) {
		printf("큐가 가득찼습니다.\n");
		return;
	}
	printf("\n들옴2");
	Q->data[++(Q->rear)] = data;
	printf("\n들옴10");
	return;
}

int deQueue(Queue* Q) {
	if (isEmpty(Q)) {
		printf("큐가 비었습니다.\n");
	}
	return Q->data[Q->front++];
}

int isEmpty(Queue* Q) {
	if (Q->front > Q->rear) {
		return 1;
	}
	else return 0;
}

void swap(int arr[],int i, int j) {
	int tmp;
	tmp = arr[i];
	arr[i] = arr[j];
	arr[j] = tmp;
	return;
}

printArr(int arr[], int len) {
	for (int i = 0; i < len; i++) {
		printf("%d ", arr[i]);
	}
	printf("\n");
}



int radixSort(int arr[],int len) {
	int ten=10;
	int k = 0;
	printf("\n들옴1");
	for (int i = 0; i < len; i++) {
		printf("\n들옴2");
		if (arr[i] >= ten)ten *= 10;
	}
	for (int i = 1; i < ten; i *= 10) {
		printf("\n들옴3");
		Queue* bucket = (Queue*)malloc(sizeof(Queue) * 10);
		for (int j = 0; j < len; j++) {
			printf("\n들옴2");
			enQueue(&bucket[arr[j] % i], arr[j]);
		}
		for (int j = 0,k=0; k < 10; j++) {
			printf("\n들옴2");
			while (!isEmpty(&bucket[k])) {
				arr[j++] = deQueue(&bucket[k]);
			}
		}
		free(bucket);
	}
}


main() {
	int random;
	int arr[MAX];
	int len = sizeof(arr) / sizeof(int);
	srand(time(NULL));
	for (int i = 0; i < len; i++) {
		random = rand() % 100;
		arr[i] = random;
	}

	printf("정렬할 원소 : ");
	printArr(arr, len);
	radixSort(arr, len);
	puts("");
	printArr(arr, len);
}
------------------------------------------------------------------------------------------------------------------------
