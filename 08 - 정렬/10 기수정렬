<배운점>

-구조체를 배열로 선언
//구조체를 배열로 선언해본게 오랜만이라 오류가뜬다.
//enQueue()에서 Q->data[++Q->rear] = data; 를 하려고하면
//프로그램이 끝나버린다.enQueue()함수엔 문제없어보이니
//구조체배열을 다루는 법을 다시 다룰 필요가 있겠다.
//코드는 미완성이고 업데이트하겠다.
//일단은 큐를 연결리스트로 고쳐보았다.
Queue* Q[10];
	for (i = 0; i < 10; i++)Q[i] = (Queue*)malloc(sizeof(Queue));
//이런식으로 해야했다.
------------------------------------------------------------------------------------------------------------------------
<코드>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX 8

typedef struct node {
	int data;
	struct node* link;
}node;

typedef struct Queue {
	node* front;
	node* rear;
}Queue;

Queue* createQueue() {
	Queue* Q = (Queue*)malloc(sizeof(Queue));
	Q->front = NULL;
	Q->rear = NULL;
}

void enQueue(Queue* Q, int data) {
	node* newnode = (node*)malloc(sizeof(node));
	newnode->link = NULL;
	newnode->data = data;
	if (isEmpty(Q)) {
		Q->front = newnode;
		Q->rear = newnode;
		return;
	}
	Q->rear->link = newnode;
	Q->rear = newnode;
	return;
}

int deQueue(Queue* Q) {
	if (isEmpty(Q)) {
		printf("Q가 비었습니다.\n");
		return -1;
	}
	int tmp;
	tmp = Q->front->data;
	Q->front = Q->front->link;
	return tmp;
}

int isEmpty(Queue* Q) {
	if (Q->front == NULL) {
		return 1;
	}
	else return 0;
}

void swap(int arr[], int i, int j) {
	int tmp;
	tmp = arr[i];
	arr[i] = arr[j];
	arr[j] = tmp;
	return;
}

void printArr(int arr[], int len) {
	for (int i = 0; i < len; i++) {
		printf("%d ", arr[i]);
	}
	printf("\n");
}

int finddigit(int arr[], int len) {	// 배열 arr변수가 들고있는 숫자중에 제일 큰 자릿수(ex. 10의자리, 100의자리 등등..) 리턴
	int digit = 10;
	int cnt = 1;
	for (int i = 0; i < len; i++) {
		while (arr[i] >= digit) {
			digit = digit * 10;
			cnt++;
		}
	}
	return cnt;
}

int radixSort(int arr[], int len) {
	int digit;
	int i,j,k;
	digit = finddigit(arr, len);	// 몇 자리수까지 있는지 확인
	Queue* Q[10];
	for (i = 0; i < 10; i++)Q[i] = (Queue*)malloc(sizeof(Queue));
	for (i = 0; i < digit; i++) {
		for (j = 0; j < len; j++) {
			enQueue()
		}
	}
}

main() {
	int random;
	int arr[MAX];
	int len = sizeof(arr) / sizeof(int);
	srand(time(NULL));
	for (int i = 0; i < len; i++) {
		random = rand() % 100;
		arr[i] = random;
	}

	printf("정렬할 원소 : ");
	printArr(arr, len);
	radixSort(arr, len);
	puts("");
	printArr(arr, len);
}
------------------------------------------------------------------------------------------------------------------------
