<배운점>

-후위표기식 변환법
((A*B)-(C/D))가 있다면 
1. 열리는 괄호'('는 무시한다.
2. 숫자(또는 문자)는 바로 출력해준다.
3. 연산자나오면 push()한다.
4. 닫히는 괄호가 나오면 pop()하여 출력한다.
5. 수식이 끝나면 모두 pop()해준다
6. 결과 : AB*CD/-

-후위표기식 계산법
AB*CD/-가 있다면
1. 숫자(또는 문자)는 push()한다.
2. 연산자가 나오면 젤 최근에 스택에 넣은 두 숫자(pop()두번필요)를 연산해주고 다시 push()해준다.
ㄴ여기서 주의점은 첫번째 팝이 연산자 뒤의 피연산자 두번째 팝이 연산자 앞의 피연산자이다.
3. 마지막 연산자가 끝나면 pop()후 출력해준다.

-문자형에서의 숫자와 아스키코드
evalpostfix()에서 볼수있듯이 값에 +'0'을 해준다거나 -'0'을 해주는 것을 볼수있다.
그 이유는 
1. 스택의 데이터 형이 문자형이다.(후위표기식으로 변환 때문에 이렇게만들었음.)
2. '1'이라는 문자의 아스키코드 값은 49이다. '0'은 48이다. 
따라서 int형 변수 op1에 '1'이라는 문자를 정수형으로 넣으려면 -'0'을 해주면 아스키코드값으로 1이 들어가게되어있다.
3. 반대로 스택에 넣을때는 오해없이 문자형으로 넣기위해 +'0'을 해주는 코드를 볼수 있다.

--------------------------------------------------------------------------------------------------------------------------------------------

#include <stdio.h>
#include<stdlib.h>
#include <string.h>

#define TRUE 1
#define FALSE 0

typedef struct StackNode { // 스택데이터를 담는 노드 구조체
	char data;
	struct StackNode* link;
}stackNode;

stackNode* top; // top

stackNode* CreateNode(char data) { // 스택노드생성
	stackNode* newnode = (stackNode*)malloc(sizeof(stackNode));
	newnode->data = data;
	newnode->link = NULL;
	return newnode;
}

void push(char data) { //push
	stackNode* newnode = CreateNode(data);
	if (top == NULL) { // 스택이 비어있다면
		top = newnode;
		return;
	}
	newnode->link = top; // 비어있지않다면
	top = newnode;
	return;
}

char pop() {
	if (isEmpty()) { // 비어있으면 
		printf("스택이 비었습니다.\n");
		return '0';
	}
	stackNode* tmp; // free를 위한 임시저장소
	char rtdata = top->data; // 리턴을 위한 변수
	tmp = top;
	top = top->link;
	free(tmp);
	return rtdata;
}

int isEmpty() { // 비어있는지 확인
	if (top == NULL)return TRUE;
	else return FALSE;
}

void printStack() {
	if (isEmpty()) {
		printf("비어있습니다\n");
		return;
	}
	stackNode* horse = top;
	for (; horse != NULL; horse = horse->link) {
		printf("%c ", horse->data);
	}
	printf("\n");
}

int check_pair(char* str) {
	int len = strlen(str); // 문자열길이
	char open_pair; // 쌍이 맞는지 확인 변수
	char symbol;
	for (int i = 0; i < len; i++) { // 길이만큼 반복        char a[] = "(a+b)+{a*b+(a+c)}";
		symbol = str[i];   
		switch (symbol)
		{
		case '[':
		case '{':
		case '(':
			push(symbol);
			break; // 위의 세개  푸시후 다음 심볼검사로
		case ']':
		case '}':
		case ')': 
			if (top == NULL)
				return FALSE;
			else {
				open_pair = pop();
				if ((symbol == ']' && open_pair != '[') ||
					(symbol == '}' && open_pair != '{') ||
					(symbol == ')' && open_pair != '('))
				{
					return FALSE;
				}
				else break;
			}
		}
	}
	if (top == NULL) // 반복문 마쳤는데 스택에 괄호남아있으면 쌍 안맞음
		return 1;
	else 
		return FALSE;
}

char* infix_to_postfix(char* str) { // 후위 표기식으로 변환
	int len = strlen(str);
	int cnt = 0;
	char* a = (char*)malloc(sizeof(char) * len);
	for (int i = 0; i < len; i++) {
		if (str[i] == '[' || str[i] == '{' || str[i] == '(')continue;
		else if (str[i] == ']' || str[i] == '}' || str[i] == ')') {
			a[cnt++] = pop();
		}
		else if (str[i] == '+' || str[i] == '-' || str[i] == '*' || str[i] == '/') {
			push(str[i]);
		}
		else a[cnt++] = str[i];
	}
	a[cnt] = '\0';
	return a;
}

int evalpostfix(char* str) {
	printf("후위표기법 계산 실행\n");
	int len = strlen(str); // 문자열 길이
	int answer = 0; // 리턴 값
	char symbol; 
	int op1, op2; // 계산을 위한 변수
	for (int i = 0; i < len; i++) { 
		if (str[i] == '+' || str[i] == '-' || str[i] == '*' || str[i] == '/') {  // 일 때
			symbol = str[i];
			op1 = pop()-'0'; // 스택의 데이터값은 문자형이기 때문에, '0'을 해줘서 정수형으로 정수형으로 맞춘다.
			op2 = pop()-'0'; 
			switch (symbol)
			{
			case '+':push((op1 + op2) + '0'); break; // 스택의 데이터값이 문자형이기 때문에 문자형으로 넣어준다.
			case '-':push((op1 - op2) + '0'); break;
			case '*':push((op1 * op2) + '0'); break;
			case '/':push((op2 / op1) + '0'); break;

			}
		}
		else push(str[i]); // 수식이 아니면 푸시
	}
	answer = pop()-'0';
	return answer;
}

main() {
	top = NULL;
	char a[] = "((8*2)+(8/4))";
	char* b = NULL;
	if (check_pair(a)) {
		printf("괄호 쌍이 일치합니다.\n");
	}
	else printf("괄호 쌍이 일치하지 않습니다.\n");
	b = infix_to_postfix(a);
	printf("%s\n", b);
	printf("계산결과 = %d", evalpostfix(b));
}

--------------------------------------------------------------------------------------------------------------------------------------------
<출력>
괄호 쌍이 일치합니다.
82*84/+
후위표기법 계산 실행
계산결과 = 18
