<배운점>

-정렬된 배열의 순차탐색
// 정렬되지 않은 배열의 순차탐색과의 차이점은
// 키값이 없을 때 중간에 멈출 수 있다는 것이다.

------------------------------------------------------------------------------------------------
<코드>

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX 8

void printArr(int arr[], int len) {
	for (int i = 0; i < len; i++) {
		printf("%d ", arr[i]);
	}
	printf("\n");
}

int sequentialSearch1(int arr[], int len, int key) {
	int i;
	for (i = 0; i < len; i++) {
		if (arr[i] > key)break;
		if (arr[i] == key)return i;
	}
	printf("키값을 찾을 수 없습니다. 멈춘인덱스=[%d]\n",i);
	return -1;
}

void swap(int arr[], int i, int j) {
	int tmp;
	tmp = arr[i];
	arr[i] = arr[j];
	arr[j] = tmp;
	return;
}

void selectionSort(int arr[], int len) { // 배열과 배열의 크기
	int min, index;
	int tmp;
	for (int j = 0; j < len - 1; j++) {
		min = arr[j];
		index = j;
		for (int i = j + 1; i < len; i++) {
			if (arr[i] < min) {
				min = arr[i];
				index = i;
			}
		}
		swap(arr, j, index);
	}
	return;
}

main() {
	int key;
	int random;
	int arr[MAX];
	int index;
	int len = sizeof(arr) / sizeof(int);
	srand(time(NULL));
	for (int i = 0; i < len; i++) {
		random = rand() % 100;
		arr[i] = random;
	}
	printf("정렬되지 않은 원소 : ");
	printArr(arr, len);
	selectionSort(arr, len);
	printf("정렬된 원소 : ");
	printArr(arr, len);
	//순차 탐색
	printf("찾을 원소 : ");
	scanf("%d", &key);

	printf("\n<<<<<순차 탐색실행>>>>>\n");
	index = sequentialSearch1(arr, len, key);
	if (index != -1)printf("키 %d는 arr의 인덱스 [%d]입니다.\n", key, index);
}
------------------------------------------------------------------------------------------------
<출력>

정렬되지 않은 원소 : 37 31 92 45 80 70 76 50
정렬된 원소 : 31 37 45 50 70 76 80 92
찾을 원소 : 73

<<<<<순차 탐색실행>>>>>
키값을 찾을 수 없습니다. 멈춘인덱스=[5]
